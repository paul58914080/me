{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my notes","title":"About me"},{"location":"pages/backend/hexagonal-architecture/","text":"","title":"Hexagonal architecture"},{"location":"pages/backend/scaffold-hexagon-spring-boot/","text":"Coming soon","title":"Scaffold hexagon spring-boot"},{"location":"pages/devops/docker/","text":"Coming soon","title":"Docker"},{"location":"pages/devops/github-actions/","text":"Coming soon","title":"Github actions"},{"location":"pages/frontend/micro-frontend/","text":"Coming soon","title":"Micro frontend"},{"location":"pages/frontend/rxjs/","text":"Coming soon","title":"RxJS"},{"location":"pages/frontend/scaffold-angular/","text":"angular-cli provides an amazing tooling for scaffolding, building, testing and deploying Angular applications. However, when you want to perform additional tasks like the following, the tooling is not enough: Linting SCSS, HTML Format with Prettier Commit message linting Pre-commit hooks Mock server Translations Configuration management Logging In this article, we will see how to add these features to an Angular application created with angular-cli. Prerequisites \u00b6 Node.js Yarn Angular CLI At the time of this notes, angular was 17x, node LTS was 20x and yarn was 1.22x. Scaffold base angular \u00b6 Generate the base Angular application with the following command: ng new [my-app] --package-manager=yarn --style=scss --routing=true --ssr=false Read more More about this command in the official documentation . Angular ESLint \u00b6 Add ESLint dependency to the project with the following command: ng add @angular-eslint/schematics Read more More about angular-eslint in the official documentation . Lint SCSS \u00b6 Add SCSS linting dependencies to the project with the following command: yarn add -D stylelint stylelint-config-sass-guidelines stylelint-scss Add the configuration in .lint/.stylelintrc.json : .lint/.stylelintrc.json { \"extends\" : \"stylelint-config-sass-guidelines\" , \"plugins\" : [ \"stylelint-scss\" ], \"rules\" : { \"color-hex-length\" : \"long\" , \"selector-pseudo-element-no-unknown\" : [ true , { \"ignorePseudoElements\" : [ \"ng-deep\" ] } ] } } Add the script in package.json : package.json { \"scripts\" : { \"lint:styles\" : \"stylelint --config .lint/.stylelintrc.json src/app/**/*.scss\" } } Read more More about stylelint in the official documentation . Lint HTML \u00b6 Add HTML linting dependency to the project with the following command: yarn add -D htmlhint Add the configuration in .lint/.htmlhintrc : .lint/.htmlhintrc { \"tagname-lowercase\" : true , \"attr-lowercase\" : true , \"attr-value-double-quotes\" : true , \"attr-value-not-empty\" : false , \"attr-no-duplication\" : true , \"doctype-first\" : false , \"tag-pair\" : true , \"tag-self-close\" : false , \"spec-char-escape\" : true , \"id-unique\" : true , \"src-not-empty\" : true , \"title-require\" : true , \"alt-require\" : true , \"doctype-html5\" : true , \"id-class-value\" : \"dash\" , \"style-disabled\" : true , \"inline-style-disabled\" : true , \"inline-script-disabled\" : true , \"space-tab-mixed-disabled\" : \"space\" , \"id-class-ad-disabled\" : true , \"href-abs-or-rel\" : false , \"attr-unsafe-chars\" : true } Add the script in package.json : package.json { \"scripts\" : { \"lint:html\" : \"htmlhint --config .lint/.htmlhintrc src/app/**/*.html\" } } Read more More about htmlhint in the official documentation . Update ng lint script \u00b6 package.json { \"scripts\": { - \"lint\": \"ng lint\" + \"lint:ng\": \"ng lint\" } } Run all linters \u00b6 In order to run all linters we need a dependency npm-run-all. Add the following dependency to the project with the following command: yarn add -D npm-run-all Add the script in package.json : package.json { \"scripts\" : { \"lint\" : \"npm-p lint:ng lint:styles lint:html\" } } Read more More about npm-run-all in the official documentation . Format with Prettier \u00b6 Add Prettier dependencies to the project with the following command: yarn add -D prettier Add the configuration in .prettierrc : .prettierrc { \"printWidth\" : 120 , \"tabWidth\" : 2 , \"useTabs\" : false , \"semi\" : true , \"singleQuote\" : true , \"bracketSpacing\" : true } If you wish to ignore some files, add the configuration in .prettierignore : .prettierignore package.json package-lock.json yarn yarn.error.log Read more More about Prettier in the official documentation . Format staged files \u00b6 Add lint-staged dependency to the project with the following command: yarn add -D lint-staged Add the configuration in .lintstagedrc.json : .lintstagedrc.json { \"**/*.{ts,js}\" : \"eslint --cache --fix\" , \"*\" : \"prettier --cache --ignore-unknown --write\" } For formatting and linting together add the script in package.json : package.json { \"scripts\" : { \"format:prettier\" : \"lint-staged\" , \"format:all\" : \"run-s format:prettier lint\" } } Read more More about lint-staged in the official documentation Commit message linting \u00b6 Add commitlint dependencies to the project with the following command: yarn add -D @commitlint/{config-conventional,cli} Add the configuration in commitlint.config.js : commitlint.config.js module . exports = { extends : [ '@commitlint/config-conventional' ]}; Read more More about commitlint in the official documentation . Pre-commit hooks \u00b6 Add husky dependency to the project with the following command: yarn add -D husky Initialize husky with the following command: npx husky init Update pre-commit hooks with the following command: echo \"yarn format:all\" > .husky/pre-commit Update pre-push hooks with the following command: echo \"yarn test\" > .husky/pre-push Update commit-msg hooks with the following command: echo \"yarn commitlint --edit \\$1\" > .husky/commit-msg Read more More about husky in the official documentation . Mock server \u00b6 In this section you will basically create a mock server using json-server for the API requests and proxy the requests to the mock server. Add json-server dependency to the project with the following command: yarn add -D json-server Update the script in package.json : package.json { \"scripts\" : { \"mock:server\" : \"json-server --watch mock/db.json --port 3000\" , \"start\" : \"run-p mock:server \\\"ng serve\\\"\" } } Read more More about json-server in the official documentation . You might also want to proxy the API requests to the mock server. Add the following configuration in proxy.conf.json : proxy.conf.json { \"/api\" : { \"target\" : \"http://localhost:3000\" , \"secure\" : false } } In the angular.json file, update the serve options to use the proxy configuration: angular.json { \"projects\": { \"[my-app]\": { \"architect\": { \"serve\": { \"options\": { + \"proxyConfig\": \"proxy.conf.json\" } } } } } } Read more More about this configuration in the official documentation . Translations \u00b6 Add ngx-translate dependencies to the project with the following command: yarn add @ngx-translate/core @ngx-translate/http-loader We are using ngx-translate/http-loader to load translations from a JSON file. Create a src/assets/i18n/en.json file with the following content: src/assets/i18n/en.json { \"HELLO\" : \"Hello World!\" } Update app.config.ts file with the following content: src/app/app.config.ts import { APP_INITIALIZER , ApplicationConfig , importProvidersFrom , Injector } from '@angular/core' ; import { provideRouter } from '@angular/router' ; import { routes } from './app.routes' ; import { TranslateHttpLoader } from '@ngx-translate/http-loader' ; import { HttpClient , HttpClientModule } from '@angular/common/http' ; import { TranslateLoader , TranslateModule , TranslateService } from '@ngx-translate/core' ; import { appInitializerFactory } from './appInitializerFactory' ; const httpLoaderFactory = ( http : HttpClient ) : TranslateLoader => new TranslateHttpLoader ( http ); export const appConfig : ApplicationConfig = { providers : [ provideRouter ( routes ), importProvidersFrom ( HttpClientModule ), importProvidersFrom ( TranslateModule . forRoot ({ loader : { provide : TranslateLoader , useFactory : httpLoaderFactory , deps : [ HttpClient ], }, }), ), { provide : APP_INITIALIZER , useFactory : appInitializerFactory , deps : [ TranslateService , Injector ], multi : true , }, ], }; Create appInitializerFactory.ts file with the following content: src/app/appInitializerFactory.ts import { Injector } from '@angular/core' ; import { TranslateService } from '@ngx-translate/core' ; import { LOCATION_INITIALIZED } from '@angular/common' ; export const appInitializerFactory = ( translate : TranslateService , injector : Injector ) => () => new Promise (( resolve ) => { const locationInitialized = injector . get ( LOCATION_INITIALIZED , Promise . resolve ( null )); locationInitialized . then (() => { const langToSet = 'en' ; // todo: this can be injected from a user service to get the user's preferred language translate . setDefaultLang ( 'en' ); //todo: this can be injected from env variable translate . use ( langToSet ). subscribe ({ next : () => { console . log ( `Successfully initialized ' ${ langToSet } ' language.` ); // todo: eplace this by a logger }, error : ( err ) => { console . error ( `Problem with ' ${ langToSet } ' language initialization.` , err ); }, complete : () => { resolve ( null ); }, }); }); }); Read more More about ngx-translate in the official documentation . Configuration management \u00b6 You may want to manage configuration of your application through environment variables. Add the @ngx-env dependency to the project with the following command: ng add @ngx-env/builder The above command will add dev dependency of @ngx-env/builder and update the angular.json file to use the builder. You can then create a .env file with the following content: .env NG_APP_DEFAULT_LANGUAGE = en Since we are using typescript, we can strictly type the environment variables with the new file created by the ngx-env/build i.e. src/app/env.d.ts: src/app/env.d.ts interface ImportMeta { readonly env : ImportMetaEnv ; } interface ImportMetaEnv { /** * Built-in environment variable. * @see Docs https://github.com/chihab/dotenv-run/packages/angular#node_env. */ readonly NODE_ENV : string ; readonly NG_APP_DEFAULT_LANGUAGE : string ; // Add your environment variables below // readonly NG_APP_API_URL: string; [ key : string ] : any ; } Now you should be able to access the environment variables in your application like so: src/app/appInitializerFactory.ts import { Injector } from '@angular/core'; import { TranslateService } from '@ngx-translate/core'; import { LOCATION_INITIALIZED } from '@angular/common'; export const appInitializerFactory = (translate: TranslateService, injector: Injector) => () => new Promise((resolve) => { const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() => { const langToSet = 'en'; // todo: this can be injected from a user service to get the user's preferred language + translate.setDefaultLang(import.meta.env.NG_APP_DEFAULT_LANGUAGE); translate.use(langToSet).subscribe({ next: () => { console.log(`Successfully initialized '${langToSet}' language.`); }, error: (err) => { console.error(`Problem with '${langToSet}' language initialization.`, err); }, complete: () => { resolve(null); }, }); }); }); Read more More about ngx-env in the official documentation . You may also want to choose when .env file you would like to load, and for doing that you can add cross-env dependency to the project with the following command: yarn add -D cross-env Update the start script in package.json : package.json { \"scripts\" : { \"start\" : \"cross-env NODE_ENV=local run-p mock:server \\\"ng serve\\\"\" } } Read more More about cross-env in the official documentation . Logging \u00b6 Add ngx-logger dependencies to the project with the following command: yarn add ngx-logger Update app.config.ts file with the following content: src/app/app.config.ts import { APP_INITIALIZER, ApplicationConfig, importProvidersFrom, Injector } from '@angular/core'; import { provideRouter } from '@angular/router'; import { routes } from './app.routes'; import { TranslateHttpLoader } from '@ngx-translate/http-loader'; import { HttpClient, HttpClientModule } from '@angular/common/http'; import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core'; import { appInitializerFactory } from './appInitializerFactory'; + import { LoggerModule, NGXLogger, NgxLoggerLevel } from 'ngx-logger'; const httpLoaderFactory = (http: HttpClient): TranslateLoader => new TranslateHttpLoader(http); export const appConfig: ApplicationConfig = { providers: [ provideRouter(routes), importProvidersFrom(HttpClientModule), importProvidersFrom( TranslateModule.forRoot({ loader: { provide: TranslateLoader, useFactory: httpLoaderFactory, deps: [HttpClient], }, }), ), { provide: APP_INITIALIZER, useFactory: appInitializerFactory, + deps: [TranslateService, Injector, NGXLogger], multi: true, }, + importProvidersFrom(LoggerModule.forRoot( { level: NgxLoggerLevel.DEBUG})) ], }; Update appInitializerFactory.ts file with the following content: src/app/appInitializerFactory.ts import { Injector } from '@angular/core'; import { TranslateService } from '@ngx-translate/core'; import { LOCATION_INITIALIZED } from '@angular/common'; + import { NGXLogger } from 'ngx-logger'; export const appInitializerFactory = (translate: TranslateService, injector: Injector, logger: NGXLogger) => () => new Promise((resolve) => { const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() => { const langToSet = 'en'; // todo: this can be injected from a user service to get the user's preferred language translate.setDefaultLang(import.meta.env.NG_APP_DEFAULT_LANGUAGE); translate.use(langToSet).subscribe({ next: () => { + logger.info(`Successfully initialized '${langToSet}' language.`); }, error: (err) => { + logger.error(`Problem with '${langToSet}' language initialization.`, err); }, complete: () => { resolve(null); }, }); }); }); Read more More about ngx-logger in the official documentation .","title":"Scaffold angular"},{"location":"pages/frontend/scaffold-angular/#prerequisites","text":"Node.js Yarn Angular CLI At the time of this notes, angular was 17x, node LTS was 20x and yarn was 1.22x.","title":"Prerequisites"},{"location":"pages/frontend/scaffold-angular/#scaffold-base-angular","text":"Generate the base Angular application with the following command: ng new [my-app] --package-manager=yarn --style=scss --routing=true --ssr=false Read more More about this command in the official documentation .","title":"Scaffold base angular"},{"location":"pages/frontend/scaffold-angular/#angular-eslint","text":"Add ESLint dependency to the project with the following command: ng add @angular-eslint/schematics Read more More about angular-eslint in the official documentation .","title":"Angular ESLint"},{"location":"pages/frontend/scaffold-angular/#lint-scss","text":"Add SCSS linting dependencies to the project with the following command: yarn add -D stylelint stylelint-config-sass-guidelines stylelint-scss Add the configuration in .lint/.stylelintrc.json : .lint/.stylelintrc.json { \"extends\" : \"stylelint-config-sass-guidelines\" , \"plugins\" : [ \"stylelint-scss\" ], \"rules\" : { \"color-hex-length\" : \"long\" , \"selector-pseudo-element-no-unknown\" : [ true , { \"ignorePseudoElements\" : [ \"ng-deep\" ] } ] } } Add the script in package.json : package.json { \"scripts\" : { \"lint:styles\" : \"stylelint --config .lint/.stylelintrc.json src/app/**/*.scss\" } } Read more More about stylelint in the official documentation .","title":"Lint SCSS"},{"location":"pages/frontend/scaffold-angular/#lint-html","text":"Add HTML linting dependency to the project with the following command: yarn add -D htmlhint Add the configuration in .lint/.htmlhintrc : .lint/.htmlhintrc { \"tagname-lowercase\" : true , \"attr-lowercase\" : true , \"attr-value-double-quotes\" : true , \"attr-value-not-empty\" : false , \"attr-no-duplication\" : true , \"doctype-first\" : false , \"tag-pair\" : true , \"tag-self-close\" : false , \"spec-char-escape\" : true , \"id-unique\" : true , \"src-not-empty\" : true , \"title-require\" : true , \"alt-require\" : true , \"doctype-html5\" : true , \"id-class-value\" : \"dash\" , \"style-disabled\" : true , \"inline-style-disabled\" : true , \"inline-script-disabled\" : true , \"space-tab-mixed-disabled\" : \"space\" , \"id-class-ad-disabled\" : true , \"href-abs-or-rel\" : false , \"attr-unsafe-chars\" : true } Add the script in package.json : package.json { \"scripts\" : { \"lint:html\" : \"htmlhint --config .lint/.htmlhintrc src/app/**/*.html\" } } Read more More about htmlhint in the official documentation .","title":"Lint HTML"},{"location":"pages/frontend/scaffold-angular/#update-ng-lint-script","text":"package.json { \"scripts\": { - \"lint\": \"ng lint\" + \"lint:ng\": \"ng lint\" } }","title":"Update ng lint script"},{"location":"pages/frontend/scaffold-angular/#run-all-linters","text":"In order to run all linters we need a dependency npm-run-all. Add the following dependency to the project with the following command: yarn add -D npm-run-all Add the script in package.json : package.json { \"scripts\" : { \"lint\" : \"npm-p lint:ng lint:styles lint:html\" } } Read more More about npm-run-all in the official documentation .","title":"Run all linters"},{"location":"pages/frontend/scaffold-angular/#format-with-prettier","text":"Add Prettier dependencies to the project with the following command: yarn add -D prettier Add the configuration in .prettierrc : .prettierrc { \"printWidth\" : 120 , \"tabWidth\" : 2 , \"useTabs\" : false , \"semi\" : true , \"singleQuote\" : true , \"bracketSpacing\" : true } If you wish to ignore some files, add the configuration in .prettierignore : .prettierignore package.json package-lock.json yarn yarn.error.log Read more More about Prettier in the official documentation .","title":"Format with Prettier"},{"location":"pages/frontend/scaffold-angular/#format-staged-files","text":"Add lint-staged dependency to the project with the following command: yarn add -D lint-staged Add the configuration in .lintstagedrc.json : .lintstagedrc.json { \"**/*.{ts,js}\" : \"eslint --cache --fix\" , \"*\" : \"prettier --cache --ignore-unknown --write\" } For formatting and linting together add the script in package.json : package.json { \"scripts\" : { \"format:prettier\" : \"lint-staged\" , \"format:all\" : \"run-s format:prettier lint\" } } Read more More about lint-staged in the official documentation","title":"Format staged files"},{"location":"pages/frontend/scaffold-angular/#commit-message-linting","text":"Add commitlint dependencies to the project with the following command: yarn add -D @commitlint/{config-conventional,cli} Add the configuration in commitlint.config.js : commitlint.config.js module . exports = { extends : [ '@commitlint/config-conventional' ]}; Read more More about commitlint in the official documentation .","title":"Commit message linting"},{"location":"pages/frontend/scaffold-angular/#pre-commit-hooks","text":"Add husky dependency to the project with the following command: yarn add -D husky Initialize husky with the following command: npx husky init Update pre-commit hooks with the following command: echo \"yarn format:all\" > .husky/pre-commit Update pre-push hooks with the following command: echo \"yarn test\" > .husky/pre-push Update commit-msg hooks with the following command: echo \"yarn commitlint --edit \\$1\" > .husky/commit-msg Read more More about husky in the official documentation .","title":"Pre-commit hooks"},{"location":"pages/frontend/scaffold-angular/#mock-server","text":"In this section you will basically create a mock server using json-server for the API requests and proxy the requests to the mock server. Add json-server dependency to the project with the following command: yarn add -D json-server Update the script in package.json : package.json { \"scripts\" : { \"mock:server\" : \"json-server --watch mock/db.json --port 3000\" , \"start\" : \"run-p mock:server \\\"ng serve\\\"\" } } Read more More about json-server in the official documentation . You might also want to proxy the API requests to the mock server. Add the following configuration in proxy.conf.json : proxy.conf.json { \"/api\" : { \"target\" : \"http://localhost:3000\" , \"secure\" : false } } In the angular.json file, update the serve options to use the proxy configuration: angular.json { \"projects\": { \"[my-app]\": { \"architect\": { \"serve\": { \"options\": { + \"proxyConfig\": \"proxy.conf.json\" } } } } } } Read more More about this configuration in the official documentation .","title":"Mock server"},{"location":"pages/frontend/scaffold-angular/#translations","text":"Add ngx-translate dependencies to the project with the following command: yarn add @ngx-translate/core @ngx-translate/http-loader We are using ngx-translate/http-loader to load translations from a JSON file. Create a src/assets/i18n/en.json file with the following content: src/assets/i18n/en.json { \"HELLO\" : \"Hello World!\" } Update app.config.ts file with the following content: src/app/app.config.ts import { APP_INITIALIZER , ApplicationConfig , importProvidersFrom , Injector } from '@angular/core' ; import { provideRouter } from '@angular/router' ; import { routes } from './app.routes' ; import { TranslateHttpLoader } from '@ngx-translate/http-loader' ; import { HttpClient , HttpClientModule } from '@angular/common/http' ; import { TranslateLoader , TranslateModule , TranslateService } from '@ngx-translate/core' ; import { appInitializerFactory } from './appInitializerFactory' ; const httpLoaderFactory = ( http : HttpClient ) : TranslateLoader => new TranslateHttpLoader ( http ); export const appConfig : ApplicationConfig = { providers : [ provideRouter ( routes ), importProvidersFrom ( HttpClientModule ), importProvidersFrom ( TranslateModule . forRoot ({ loader : { provide : TranslateLoader , useFactory : httpLoaderFactory , deps : [ HttpClient ], }, }), ), { provide : APP_INITIALIZER , useFactory : appInitializerFactory , deps : [ TranslateService , Injector ], multi : true , }, ], }; Create appInitializerFactory.ts file with the following content: src/app/appInitializerFactory.ts import { Injector } from '@angular/core' ; import { TranslateService } from '@ngx-translate/core' ; import { LOCATION_INITIALIZED } from '@angular/common' ; export const appInitializerFactory = ( translate : TranslateService , injector : Injector ) => () => new Promise (( resolve ) => { const locationInitialized = injector . get ( LOCATION_INITIALIZED , Promise . resolve ( null )); locationInitialized . then (() => { const langToSet = 'en' ; // todo: this can be injected from a user service to get the user's preferred language translate . setDefaultLang ( 'en' ); //todo: this can be injected from env variable translate . use ( langToSet ). subscribe ({ next : () => { console . log ( `Successfully initialized ' ${ langToSet } ' language.` ); // todo: eplace this by a logger }, error : ( err ) => { console . error ( `Problem with ' ${ langToSet } ' language initialization.` , err ); }, complete : () => { resolve ( null ); }, }); }); }); Read more More about ngx-translate in the official documentation .","title":"Translations"},{"location":"pages/frontend/scaffold-angular/#configuration-management","text":"You may want to manage configuration of your application through environment variables. Add the @ngx-env dependency to the project with the following command: ng add @ngx-env/builder The above command will add dev dependency of @ngx-env/builder and update the angular.json file to use the builder. You can then create a .env file with the following content: .env NG_APP_DEFAULT_LANGUAGE = en Since we are using typescript, we can strictly type the environment variables with the new file created by the ngx-env/build i.e. src/app/env.d.ts: src/app/env.d.ts interface ImportMeta { readonly env : ImportMetaEnv ; } interface ImportMetaEnv { /** * Built-in environment variable. * @see Docs https://github.com/chihab/dotenv-run/packages/angular#node_env. */ readonly NODE_ENV : string ; readonly NG_APP_DEFAULT_LANGUAGE : string ; // Add your environment variables below // readonly NG_APP_API_URL: string; [ key : string ] : any ; } Now you should be able to access the environment variables in your application like so: src/app/appInitializerFactory.ts import { Injector } from '@angular/core'; import { TranslateService } from '@ngx-translate/core'; import { LOCATION_INITIALIZED } from '@angular/common'; export const appInitializerFactory = (translate: TranslateService, injector: Injector) => () => new Promise((resolve) => { const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() => { const langToSet = 'en'; // todo: this can be injected from a user service to get the user's preferred language + translate.setDefaultLang(import.meta.env.NG_APP_DEFAULT_LANGUAGE); translate.use(langToSet).subscribe({ next: () => { console.log(`Successfully initialized '${langToSet}' language.`); }, error: (err) => { console.error(`Problem with '${langToSet}' language initialization.`, err); }, complete: () => { resolve(null); }, }); }); }); Read more More about ngx-env in the official documentation . You may also want to choose when .env file you would like to load, and for doing that you can add cross-env dependency to the project with the following command: yarn add -D cross-env Update the start script in package.json : package.json { \"scripts\" : { \"start\" : \"cross-env NODE_ENV=local run-p mock:server \\\"ng serve\\\"\" } } Read more More about cross-env in the official documentation .","title":"Configuration management"},{"location":"pages/frontend/scaffold-angular/#logging","text":"Add ngx-logger dependencies to the project with the following command: yarn add ngx-logger Update app.config.ts file with the following content: src/app/app.config.ts import { APP_INITIALIZER, ApplicationConfig, importProvidersFrom, Injector } from '@angular/core'; import { provideRouter } from '@angular/router'; import { routes } from './app.routes'; import { TranslateHttpLoader } from '@ngx-translate/http-loader'; import { HttpClient, HttpClientModule } from '@angular/common/http'; import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core'; import { appInitializerFactory } from './appInitializerFactory'; + import { LoggerModule, NGXLogger, NgxLoggerLevel } from 'ngx-logger'; const httpLoaderFactory = (http: HttpClient): TranslateLoader => new TranslateHttpLoader(http); export const appConfig: ApplicationConfig = { providers: [ provideRouter(routes), importProvidersFrom(HttpClientModule), importProvidersFrom( TranslateModule.forRoot({ loader: { provide: TranslateLoader, useFactory: httpLoaderFactory, deps: [HttpClient], }, }), ), { provide: APP_INITIALIZER, useFactory: appInitializerFactory, + deps: [TranslateService, Injector, NGXLogger], multi: true, }, + importProvidersFrom(LoggerModule.forRoot( { level: NgxLoggerLevel.DEBUG})) ], }; Update appInitializerFactory.ts file with the following content: src/app/appInitializerFactory.ts import { Injector } from '@angular/core'; import { TranslateService } from '@ngx-translate/core'; import { LOCATION_INITIALIZED } from '@angular/common'; + import { NGXLogger } from 'ngx-logger'; export const appInitializerFactory = (translate: TranslateService, injector: Injector, logger: NGXLogger) => () => new Promise((resolve) => { const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null)); locationInitialized.then(() => { const langToSet = 'en'; // todo: this can be injected from a user service to get the user's preferred language translate.setDefaultLang(import.meta.env.NG_APP_DEFAULT_LANGUAGE); translate.use(langToSet).subscribe({ next: () => { + logger.info(`Successfully initialized '${langToSet}' language.`); }, error: (err) => { + logger.error(`Problem with '${langToSet}' language initialization.`, err); }, complete: () => { resolve(null); }, }); }); }); Read more More about ngx-logger in the official documentation .","title":"Logging"},{"location":"pages/frontend/testing-angular/","text":"Coming soon","title":"Testing angular"},{"location":"pages/mac/homebrew/","text":"Install \u00b6 You can install Homebrew by running the following command: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" Commands \u00b6 Command Description brew list List installed packages brew list --cask List installed casks brew list --versions <package> List installed versions of a package brew search <package> Search for a package brew install <package> Install a package brew uninstall <package> Uninstall a package brew upgrade Upgrade all packages brew upgrade <package> Upgrade a package brew switch <package> <version> Switch to a specific version of a package brew update Update Homebrew brew cleanup Remove old versions brew doctor Check for issues brew outdated List outdated packages brew info <package> Display information about a package","title":"Homebrew"},{"location":"pages/mac/homebrew/#install","text":"You can install Homebrew by running the following command: /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \"","title":"Install"},{"location":"pages/mac/homebrew/#commands","text":"Command Description brew list List installed packages brew list --cask List installed casks brew list --versions <package> List installed versions of a package brew search <package> Search for a package brew install <package> Install a package brew uninstall <package> Uninstall a package brew upgrade Upgrade all packages brew upgrade <package> Upgrade a package brew switch <package> <version> Switch to a specific version of a package brew update Update Homebrew brew cleanup Remove old versions brew doctor Check for issues brew outdated List outdated packages brew info <package> Display information about a package","title":"Commands"},{"location":"pages/tips-and-tricks/intellij/","text":"Coming soon","title":"IntelliJ"},{"location":"pages/tools/git/","text":"Install \u00b6 Install git using homebrew with the following command: brew install git Configuration \u00b6 Set username \u00b6 git config --global user.name \"[Firstname Lastname]\" Set email \u00b6 git config --global user.email \"[EmailId]\" Set credential helper \u00b6 git config --global credential.helper store This will store your credentials in a plain text file at ~/.git-credentials . Usage \u00b6 Init \u00b6 Initialize got tracking inside current directory git init Initialize git tracking inside a new directory git init [ directory ] Clone \u00b6 Clone a repository git clone [ url ] Clone only a specific branch git clone --branch [ branch ] [ url ] Clone a repository to a specific directory git clone [ url ] [ directory ] Branch \u00b6 Create a new branch git branch [ branch ] Create a new branch and switch to it git checkout -b [ branch ] Switch to a branch git checkout [ branch ] Delete a branch git branch -d [ branch ] Delete a branch forcefully git branch -D [ branch ] Merge a branch git merge [ branch ] Merge a branch with a message git merge [ branch ] -m \"Message\" Add \u00b6 Add a file to staging area git add [ file ] Add all files to staging area git add . Stage all files except a specific file git add -u git git reset HEAD main/dontcheckmein.txt #or git restore --staged main/dontcheckmein.txt Remove a file from staging area git rm [ file ] Commit \u00b6 See the changes in the staging area git status Saving the staged changes with a message git commit -m \"Message\" Saving the staged changes with a message and adding all changes git commit -am \"Message\" Edit the last commit message git commit --amend -m \"New Message\" Saving \u00b6 Saving stage and unstaged changes git stash Saving stage and unstaged changes with a message git stash save \"Message\" Saving stage and unstaged changes with a message and include untracked files git stash -u save \"Message\" Apply the last stash git stash apply Apply a specific stash git stash apply stash@ { n } Apply the last stash and remove it from the list git stash pop Remove the last stash git stash drop Remove a specific stash git stash drop stash@ { n } Diff \u00b6 See the changes between the working directory and the staging area git diff See the changes between 2 commits git diff [ commit1 ] [ commit2 ] Push to a previous commit \u00b6 There are 2 ways of doing this Reset \u00b6 Use with caution Use this wisely as this would manipulate the git history and could very well jeopardise everything for you. git reset [ commitId ] --hard && git push --force --soft - Moves the HEAD to the commitId and keeps the changes in the staging area --mixed - Moves the HEAD to the commitId and keeps the changes in the working directory --hard - Moves the HEAD to the commitId and discards all changes --merge - Moves the HEAD to the commitId and keeps the changes in the staging area and working directory --keep - Moves the HEAD to the commitId and keeps the changes in the working directory Read more Simon Dosda's Post Revert \u00b6 git revert --no-commit [ commitId1 commitId2 ] && git push GitHub via SSH \u00b6 Generate a new SSH key ssh-keygen -t ed25519 -C \"[EMAIL ID]\" Add SSH key to your GitHub account Cheat Sheet \u00b6 Download Cheat Sheet","title":"Git"},{"location":"pages/tools/git/#install","text":"Install git using homebrew with the following command: brew install git","title":"Install"},{"location":"pages/tools/git/#configuration","text":"","title":"Configuration"},{"location":"pages/tools/git/#set-username","text":"git config --global user.name \"[Firstname Lastname]\"","title":"Set username"},{"location":"pages/tools/git/#set-email","text":"git config --global user.email \"[EmailId]\"","title":"Set email"},{"location":"pages/tools/git/#set-credential-helper","text":"git config --global credential.helper store This will store your credentials in a plain text file at ~/.git-credentials .","title":"Set credential helper"},{"location":"pages/tools/git/#usage","text":"","title":"Usage"},{"location":"pages/tools/git/#init","text":"Initialize got tracking inside current directory git init Initialize git tracking inside a new directory git init [ directory ]","title":"Init"},{"location":"pages/tools/git/#clone","text":"Clone a repository git clone [ url ] Clone only a specific branch git clone --branch [ branch ] [ url ] Clone a repository to a specific directory git clone [ url ] [ directory ]","title":"Clone"},{"location":"pages/tools/git/#branch","text":"Create a new branch git branch [ branch ] Create a new branch and switch to it git checkout -b [ branch ] Switch to a branch git checkout [ branch ] Delete a branch git branch -d [ branch ] Delete a branch forcefully git branch -D [ branch ] Merge a branch git merge [ branch ] Merge a branch with a message git merge [ branch ] -m \"Message\"","title":"Branch"},{"location":"pages/tools/git/#add","text":"Add a file to staging area git add [ file ] Add all files to staging area git add . Stage all files except a specific file git add -u git git reset HEAD main/dontcheckmein.txt #or git restore --staged main/dontcheckmein.txt Remove a file from staging area git rm [ file ]","title":"Add"},{"location":"pages/tools/git/#commit","text":"See the changes in the staging area git status Saving the staged changes with a message git commit -m \"Message\" Saving the staged changes with a message and adding all changes git commit -am \"Message\" Edit the last commit message git commit --amend -m \"New Message\"","title":"Commit"},{"location":"pages/tools/git/#saving","text":"Saving stage and unstaged changes git stash Saving stage and unstaged changes with a message git stash save \"Message\" Saving stage and unstaged changes with a message and include untracked files git stash -u save \"Message\" Apply the last stash git stash apply Apply a specific stash git stash apply stash@ { n } Apply the last stash and remove it from the list git stash pop Remove the last stash git stash drop Remove a specific stash git stash drop stash@ { n }","title":"Saving"},{"location":"pages/tools/git/#diff","text":"See the changes between the working directory and the staging area git diff See the changes between 2 commits git diff [ commit1 ] [ commit2 ]","title":"Diff"},{"location":"pages/tools/git/#push-to-a-previous-commit","text":"There are 2 ways of doing this","title":"Push to a previous commit"},{"location":"pages/tools/git/#reset","text":"Use with caution Use this wisely as this would manipulate the git history and could very well jeopardise everything for you. git reset [ commitId ] --hard && git push --force --soft - Moves the HEAD to the commitId and keeps the changes in the staging area --mixed - Moves the HEAD to the commitId and keeps the changes in the working directory --hard - Moves the HEAD to the commitId and discards all changes --merge - Moves the HEAD to the commitId and keeps the changes in the staging area and working directory --keep - Moves the HEAD to the commitId and keeps the changes in the working directory Read more Simon Dosda's Post","title":"Reset"},{"location":"pages/tools/git/#revert","text":"git revert --no-commit [ commitId1 commitId2 ] && git push","title":"Revert"},{"location":"pages/tools/git/#github-via-ssh","text":"Generate a new SSH key ssh-keygen -t ed25519 -C \"[EMAIL ID]\" Add SSH key to your GitHub account","title":"GitHub via SSH"},{"location":"pages/tools/git/#cheat-sheet","text":"Download Cheat Sheet","title":"Cheat Sheet"},{"location":"pages/tools/gradle/","text":"Install \u00b6 Install Gradle using SDKMAN with the following command: sdk install gradle Wrapper \u00b6 The gradle wrapper is an excellent tool to ensure that all developers use the same version of Gradle. It is a set of files that you can commit to your project, and it will download the correct version of Gradle when you run it. To create a Gradle wrapper, use the following command: gradle wrapper This will create the following files: gradlew # Unix shell script gradlew.bat # Windows batch file gradle/wrapper/gradle-wrapper.jar # Gradle wrapper JAR gradle/wrapper/gradle-wrapper.properties # Gradle wrapper properties Usage \u00b6 Build \u00b6 To build a project, run the following command: ./gradlew build To skip the tests, run the following command: ./gradlew build -x test Test \u00b6 To run tests in a project, run the following command: ./gradlew test Debug \u00b6 To debug a Gradle build, run the following command: ./gradlew build --debug Verify \u00b6 To verify a project, run the following command: ./gradlew check Dependencies \u00b6 To list the dependencies of a project, run the following command: ./gradlew dependencies Tasks \u00b6 To list the tasks of a project, run the following command: ./gradlew tasks Clean \u00b6 To clean a project, run the following command: ./gradlew clean Publish \u00b6 To publish a project, run the following command: ./gradlew publish Release \u00b6 To release a project, run the following command: ./gradlew release Upgrade wrapper \u00b6 To upgrade the Gradle wrapper, run the following command: ./gradlew wrapper --gradle-version [version]","title":"Gradle"},{"location":"pages/tools/gradle/#install","text":"Install Gradle using SDKMAN with the following command: sdk install gradle","title":"Install"},{"location":"pages/tools/gradle/#wrapper","text":"The gradle wrapper is an excellent tool to ensure that all developers use the same version of Gradle. It is a set of files that you can commit to your project, and it will download the correct version of Gradle when you run it. To create a Gradle wrapper, use the following command: gradle wrapper This will create the following files: gradlew # Unix shell script gradlew.bat # Windows batch file gradle/wrapper/gradle-wrapper.jar # Gradle wrapper JAR gradle/wrapper/gradle-wrapper.properties # Gradle wrapper properties","title":"Wrapper"},{"location":"pages/tools/gradle/#usage","text":"","title":"Usage"},{"location":"pages/tools/gradle/#build","text":"To build a project, run the following command: ./gradlew build To skip the tests, run the following command: ./gradlew build -x test","title":"Build"},{"location":"pages/tools/gradle/#test","text":"To run tests in a project, run the following command: ./gradlew test","title":"Test"},{"location":"pages/tools/gradle/#debug","text":"To debug a Gradle build, run the following command: ./gradlew build --debug","title":"Debug"},{"location":"pages/tools/gradle/#verify","text":"To verify a project, run the following command: ./gradlew check","title":"Verify"},{"location":"pages/tools/gradle/#dependencies","text":"To list the dependencies of a project, run the following command: ./gradlew dependencies","title":"Dependencies"},{"location":"pages/tools/gradle/#tasks","text":"To list the tasks of a project, run the following command: ./gradlew tasks","title":"Tasks"},{"location":"pages/tools/gradle/#clean","text":"To clean a project, run the following command: ./gradlew clean","title":"Clean"},{"location":"pages/tools/gradle/#publish","text":"To publish a project, run the following command: ./gradlew publish","title":"Publish"},{"location":"pages/tools/gradle/#release","text":"To release a project, run the following command: ./gradlew release","title":"Release"},{"location":"pages/tools/gradle/#upgrade-wrapper","text":"To upgrade the Gradle wrapper, run the following command: ./gradlew wrapper --gradle-version [version]","title":"Upgrade wrapper"},{"location":"pages/tools/jdk/","text":"Install \u00b6 Install Java using SDKMAN with the following command: sdk install java 21 .0.2-tem Configuration \u00b6 Certificates \u00b6 To list the certificates in the keystore, use the following command: keytool -list -keystore [ keystore ] -storepass [ storepass ] To add a certificate to the keystore, use the following command: keytool -import -alias [ alias ] -keystore [ keystore ] \\ -storepass [ storepass ] -file [ certificate ]","title":"JDK"},{"location":"pages/tools/jdk/#install","text":"Install Java using SDKMAN with the following command: sdk install java 21 .0.2-tem","title":"Install"},{"location":"pages/tools/jdk/#configuration","text":"","title":"Configuration"},{"location":"pages/tools/jdk/#certificates","text":"To list the certificates in the keystore, use the following command: keytool -list -keystore [ keystore ] -storepass [ storepass ] To add a certificate to the keystore, use the following command: keytool -import -alias [ alias ] -keystore [ keystore ] \\ -storepass [ storepass ] -file [ certificate ]","title":"Certificates"},{"location":"pages/tools/maven/","text":"Install \u00b6 Install Maven using SDKMAN with the following command: sdk install maven Wrapper \u00b6 The Maven Wrapper is an excellent tool to ensure that all developers use the same version of Maven. It is a set of files that you can commit to your project, and it will download the correct version of Maven when you run it. To create the Maven Wrapper, run the following command: mvn -N wrapper:wrapper We can also specify the version of Maven to use: mvn -N wrapper:wrapper -Dmaven=3.8.1 Note : The option -N means non-recursive, and it tells Maven to execute the command only in the current project and not in the modules. Usage \u00b6 Build \u00b6 To build a project, run the following command: mvnw clean install To skip the tests, run the following command: mvnw clean install -DskipTests Test \u00b6 To run test in a project, run the following command: mvnw test Debug \u00b6 To debug a Maven build, run the following command: mvnw clean install -X Verify \u00b6 To verify mvn package is valid and meets quality criteria of a project, run the following command: mvnw clean verify Package \u00b6 To package a project, run the following command: mvnw clean package Deploy \u00b6 To deploy a project, run the following command: mvnw clean deploy Release \u00b6 To release a project, run the following command: mvnw release:prepare mvnw release:perform Upgrade wrapper \u00b6 To upgrade the Maven Wrapper, run the following command: ./mvnw -N wrapper:wrapper -Dmaven = 3 .8.7 Update dependencies \u00b6 To display the new versions of the dependencies in a project, run the following command: mvnw versions:display-dependency-updates To update the dependencies in a project, run the following command: mvnw versions:use-latest-versions mvnw versions:update-properties # Update the properties To display the new versions of the plugins in a project, run the following command: mvnw versions:display-plugin-updates","title":"Maven"},{"location":"pages/tools/maven/#install","text":"Install Maven using SDKMAN with the following command: sdk install maven","title":"Install"},{"location":"pages/tools/maven/#wrapper","text":"The Maven Wrapper is an excellent tool to ensure that all developers use the same version of Maven. It is a set of files that you can commit to your project, and it will download the correct version of Maven when you run it. To create the Maven Wrapper, run the following command: mvn -N wrapper:wrapper We can also specify the version of Maven to use: mvn -N wrapper:wrapper -Dmaven=3.8.1 Note : The option -N means non-recursive, and it tells Maven to execute the command only in the current project and not in the modules.","title":"Wrapper"},{"location":"pages/tools/maven/#usage","text":"","title":"Usage"},{"location":"pages/tools/maven/#build","text":"To build a project, run the following command: mvnw clean install To skip the tests, run the following command: mvnw clean install -DskipTests","title":"Build"},{"location":"pages/tools/maven/#test","text":"To run test in a project, run the following command: mvnw test","title":"Test"},{"location":"pages/tools/maven/#debug","text":"To debug a Maven build, run the following command: mvnw clean install -X","title":"Debug"},{"location":"pages/tools/maven/#verify","text":"To verify mvn package is valid and meets quality criteria of a project, run the following command: mvnw clean verify","title":"Verify"},{"location":"pages/tools/maven/#package","text":"To package a project, run the following command: mvnw clean package","title":"Package"},{"location":"pages/tools/maven/#deploy","text":"To deploy a project, run the following command: mvnw clean deploy","title":"Deploy"},{"location":"pages/tools/maven/#release","text":"To release a project, run the following command: mvnw release:prepare mvnw release:perform","title":"Release"},{"location":"pages/tools/maven/#upgrade-wrapper","text":"To upgrade the Maven Wrapper, run the following command: ./mvnw -N wrapper:wrapper -Dmaven = 3 .8.7","title":"Upgrade wrapper"},{"location":"pages/tools/maven/#update-dependencies","text":"To display the new versions of the dependencies in a project, run the following command: mvnw versions:display-dependency-updates To update the dependencies in a project, run the following command: mvnw versions:use-latest-versions mvnw versions:update-properties # Update the properties To display the new versions of the plugins in a project, run the following command: mvnw versions:display-plugin-updates","title":"Update dependencies"},{"location":"pages/tools/node/","text":"Install \u00b6 Install Node.js via nvm using Homebrew with the following command: brew install nvm nvm allows you to quickly install and use different versions of node via the command line. Usage \u00b6 Install \u00b6 Latest version of Node.js can be installed using the following command: nvm install node To install a specific version of Node.js, use the following command: nvm install [version] Uninstall \u00b6 To uninstall a specific version of Node.js, use the following command: nvm uninstall [version] List \u00b6 You can list available versions using the following command: nvm ls-remote You can list installed versions using the following command: nvm ls Use \u00b6 You can switch between versions using the following command: nvm use [version] Which \u00b6 You can get the path to the installed version using the following command: nvm which [version] Note: You can use argument --lts to install or uninstall or use or list the latest LTS version of Node.js.","title":"Node"},{"location":"pages/tools/node/#install","text":"Install Node.js via nvm using Homebrew with the following command: brew install nvm nvm allows you to quickly install and use different versions of node via the command line.","title":"Install"},{"location":"pages/tools/node/#usage","text":"","title":"Usage"},{"location":"pages/tools/node/#install_1","text":"Latest version of Node.js can be installed using the following command: nvm install node To install a specific version of Node.js, use the following command: nvm install [version]","title":"Install"},{"location":"pages/tools/node/#uninstall","text":"To uninstall a specific version of Node.js, use the following command: nvm uninstall [version]","title":"Uninstall"},{"location":"pages/tools/node/#list","text":"You can list available versions using the following command: nvm ls-remote You can list installed versions using the following command: nvm ls","title":"List"},{"location":"pages/tools/node/#use","text":"You can switch between versions using the following command: nvm use [version]","title":"Use"},{"location":"pages/tools/node/#which","text":"You can get the path to the installed version using the following command: nvm which [version] Note: You can use argument --lts to install or uninstall or use or list the latest LTS version of Node.js.","title":"Which"},{"location":"pages/tools/sdkman/","text":"Install \u00b6 curl -s \"https://get.sdkman.io\" | bash Follow the on-screen instructions to wrap up the installation. source \"$HOME/.sdkman/bin/sdkman-init.sh\" Current running sdkman version sdk version Usage \u00b6 Install \u00b6 Install a package with the following command: sdk install [package] [version] [version] is optional. If not provided, the latest version will be installed. Remove a package sdk uninstall [package] [version] List \u00b6 List all available packages sdk list List all installed packages sdk list installed List all available versions of a package sdk list [package] Use \u00b6 Use a specific version of a package sdk use [package] [version] Default \u00b6 Set a default version of a package sdk default [package] [version] Current \u00b6 Display the current version of a package sdk current [package] Env \u00b6 You want to switch between different versions of a package in different project. This can be achieved through an .sdkmanrc file in the base directory of your project. This file can be generated automatically by issuing the following command: sdk env init After checking out a new project, you may be missing some SDKs specified in the project's .sdkmanrc file. To install these missing SDKs, just type: sdk env install When leaving a project, you may want to reset the SDKs to their default version. This can be achieved by entering: sdk env clear Upgrade \u00b6 To see what is outdated for all Candidates: sdk upgrade [package] [package] is optional. If not provided, all candidates to be upgraded will be listed. Update \u00b6 To update the candidates new version or being added or removed, run: sdk update Home \u00b6 To open the home location of a package sdk home [package] References \u00b6 SDKMAN! Documentation","title":"SDKMAN"},{"location":"pages/tools/sdkman/#install","text":"curl -s \"https://get.sdkman.io\" | bash Follow the on-screen instructions to wrap up the installation. source \"$HOME/.sdkman/bin/sdkman-init.sh\" Current running sdkman version sdk version","title":"Install"},{"location":"pages/tools/sdkman/#usage","text":"","title":"Usage"},{"location":"pages/tools/sdkman/#install_1","text":"Install a package with the following command: sdk install [package] [version] [version] is optional. If not provided, the latest version will be installed. Remove a package sdk uninstall [package] [version]","title":"Install"},{"location":"pages/tools/sdkman/#list","text":"List all available packages sdk list List all installed packages sdk list installed List all available versions of a package sdk list [package]","title":"List"},{"location":"pages/tools/sdkman/#use","text":"Use a specific version of a package sdk use [package] [version]","title":"Use"},{"location":"pages/tools/sdkman/#default","text":"Set a default version of a package sdk default [package] [version]","title":"Default"},{"location":"pages/tools/sdkman/#current","text":"Display the current version of a package sdk current [package]","title":"Current"},{"location":"pages/tools/sdkman/#env","text":"You want to switch between different versions of a package in different project. This can be achieved through an .sdkmanrc file in the base directory of your project. This file can be generated automatically by issuing the following command: sdk env init After checking out a new project, you may be missing some SDKs specified in the project's .sdkmanrc file. To install these missing SDKs, just type: sdk env install When leaving a project, you may want to reset the SDKs to their default version. This can be achieved by entering: sdk env clear","title":"Env"},{"location":"pages/tools/sdkman/#upgrade","text":"To see what is outdated for all Candidates: sdk upgrade [package] [package] is optional. If not provided, all candidates to be upgraded will be listed.","title":"Upgrade"},{"location":"pages/tools/sdkman/#update","text":"To update the candidates new version or being added or removed, run: sdk update","title":"Update"},{"location":"pages/tools/sdkman/#home","text":"To open the home location of a package sdk home [package]","title":"Home"},{"location":"pages/tools/sdkman/#references","text":"SDKMAN! Documentation","title":"References"},{"location":"pages/tools/yarn/","text":"Coming soon","title":"Yarn"}]}